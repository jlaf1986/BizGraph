@model FHNWPrototype.Application.Controllers.UIViewModels.UserAccounts.UserAccountView 

@using FHNWPrototype.Application.Controllers.UIViewModels.Publishing

@using FHNWPrototype.Application.Controllers.UIViewModels._Global

@using FHNWPrototype.Domain._Base.Accounts


@{
    ViewBag.Title = Model.Profile.FullName;
    Layout = "~/Views/Shared/_layout_3CC_three_centered_columns.cshtml";
}


@if (@Model.WallOfThisProfile  != null)
{
    <div id="post_zone">

        <section id="new_post_section">
            <article id="new_article_post" class="post"  >
                <input type="text" id="newpost" placeholder="what are you thinking?"  style="width:500px; height:20px;   text-align:center; margin-left:auto; margin-right:auto; display:block; border: 1px solid #AAAAAA"  />
            </article>
        </section>
        @{
           CompleteProfile  myProfile = (CompleteProfile)Session["myProfile"];
        }

        @foreach (PostView post in Model.WallOfThisProfile.Posts)
        {
            post.AllowedToDeletePost  = Model.IsThisMyOwnProfile;
                                       
            <section id="section_@(post.Key)">
            
                
            @{
            Html.RenderPartial("_partial_article_post", post);
            }

            @foreach (CommentView comment in post.Comments)
            {
                comment.AllowedToDeleteComment=post.AllowedToDeletePost;
                @Html.Partial("_partial_article_comment",comment)
            }

            @{
                MyNewCommentView myNewComment = new MyNewCommentView { PostKey=post.Key , Viewer=new CompleteProfileView{ BasicProfile=new BasicProfileView{ ReferenceKey=@myProfile.BasicProfile.ReferenceKey.ToString(), AccountType=@myProfile.BasicProfile.ReferenceType} , FullName=@myProfile.FullName} };
            }
            
            @{
                Html.RenderPartial("_partial_my_new_comment", myNewComment);
            }

            </section>
        }

    </div>
}

@if (Model.ShowFriendshipButtonForThisProfile)
{
  
    <div id="inprogress" style="display:none;">
        <img src="@Url.Content("~/Content/themes/designv1/images/load.gif")" alt="loading" />
    </div>
}


@section settings{
 <div id="logo">
 <a href="@Url.Action("Index","UserAccounts", null,null)"><img id="logo" src="@Url.Content("~/Content/themes/designv1/images/logov2white.png")" alt="logo" /></a> 
</div>
<div id="links">
    <ul>
      
               <li>@Html.ActionLink("Chat", "Index","Messenger", null,null)</li>

       <li>@Html.ActionLink("My Friendships", "Friendships","UserAccounts", null,null)</li>
   
        <li>@Html.ActionLink("Log Off", "LogOff", "Account", null, null)</li>
    </ul>
</div>
    }

@section header_style{
 
        <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/themes/designv1/_partial_3CC_header_two_images.css")" />
 
}

@section header{

    <figure id="brand_background">
        <img id="my_banner" src="@Url.Action("GetHeaderPictureByBasicProfile", "Retriever", new { key = @Model.Profile.BasicProfile.ReferenceKey, accountType= @Model.Profile.BasicProfile.AccountType  })" alt="brand" />
        <img id="my_logo" src="@Url.Action("GetAvatarPictureByBasicProfile", "Retriever", new { key = @Model.Profile.BasicProfile.ReferenceKey, accountType= @Model.Profile.BasicProfile.AccountType  })" alt="logo" />
    </figure>
        
    <div id="profile_status">
             
            <div id="profile_name">@Html.ActionLink(Model.Profile.FullName, "UserAccount", new { id=@Model.Profile.BasicProfile.ReferenceKey })</div>
            <div id="working_at">working at @Model.Profile.Description1   </div>
           
         
    </div>
   
}

@section left_column{
@if (Model.Profile.Description1  != null)
{
    <nav id="library">
        <h1>LIBRARY</h1>
        <ul>
            @foreach (KeyValuePair<string, string> item in @Model.FoldersOfThisProfile)
            {
                <li>@Html.ActionLink(item.Key, "Folder", "Library", new { id = item.Value }, null)</li>
            }
        </ul>
    </nav>
    <nav id="work_contacts">
        <h1>WORK CONTACTS</h1>
        <ul>
        @foreach (FHNWPrototype.Application.Controllers.UIViewModels._Global.CompleteProfileView item in @Model.WorkContactsOfThisProfile )
        {
        <li>@Html.ActionLink(item.FullName   , "UserAccount", "UserAccounts", new { id = item.BasicProfile.ReferenceKey  }, null)</li>
        }
        </ul>
    </nav>
    <nav id="partnership_contacts">
        <h1>PARTNERSHIP CONTACTS</h1>
        <ul>
             @foreach (FHNWPrototype.Application.Controllers.UIViewModels._Global.CompleteProfileView item in @Model.PartnershipContactsOfThisProfile)
             {
            <li>@Html.ActionLink(item.FullName  , "UserAccount", "UserAccounts", new { id = item.BasicProfile.ReferenceKey   }, null)</li>
             }
        </ul>
    </nav>
}
     <nav id="groups">
        <h1>GROUPS</h1>
        <ul>
             @foreach (FHNWPrototype.Application.Controllers.UIViewModels._Global.CompleteProfileView item in @Model.GroupsOfThisProfile)
             {
            <li>@Html.ActionLink(item.FullName  , "Group", "Groups", new { id = item.BasicProfile.ReferenceKey    }, null)</li>
             }
        </ul>
    </nav>
}

@section right_column{

<div id="suggestions">
 
 

</div>
}

@section scripts{

    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.signalR-1.0.0-alpha2.min.js")" ></script>

      <script type="text/javascript" src="@Url.Content("~/signalr/hubs")" ></script>
      <script>
        
        $(document).ready(function () {

            var connection = $.hubConnection();
            var notifier = connection.createHubProxy('notifier');
            connection.start()
                .done(function () {
           

                    RegisterNewPostEvent("@Url.Action("SubmitNewPost","Publishing")", "@Model.Profile.BasicProfile.ReferenceKey", notifier);
                    RegisterNewCommentEvent("@Url.Action("SubmitNewComment","Publishing")", "@Model.Profile.BasicProfile.ReferenceKey", notifier);

                    RegisterLikePostEvent("@Url.Action("LikePost","Publishing")");
                    RegisterLikeCommentEvent("@Url.Action("LikeComment","Publishing")");

                    RegisterUnLikePostEvent("@Url.Action("UnLikePost","Publishing")");
                    RegisterUnLikeCommentEvent("@Url.Action("UnLikeComment","Publishing")");

                    RegisterDeletePostEvent("@Url.Action("DeletePost","Publishing")");
                    RegisterDeleteCommentEvent("@Url.Action("DeleteComment","Publishing")");  
                     
                    notifier.invoke('SuscribeMe', '@Model.Profile.BasicProfile.ReferenceKey')
                     

                      @foreach(var groupProfile in Model.GroupsOfThisProfile)
                  {
                    <text>
                      notifier.invoke('SuscribeMe', '@groupProfile.BasicProfile.ReferenceKey')
                      .done(function () {
                        
                      })
                      .fail(function () {
                 
                      });
                      </text>
                  }

                      @foreach(var workContactProfile in Model.WorkContactsOfThisProfile)
                 {
                    <text>
                      notifier.invoke('SuscribeMe', '@workContactProfile.BasicProfile.ReferenceKey')
                      .done(function () {
                       
                      })
                      .fail(function () {
                         
                      });
                      </text>
                  }

                @foreach(var partnershipContactProfile in Model.PartnershipContactsOfThisProfile)
                 {
                    <text>
                      notifier.invoke('SuscribeMe', '@partnershipContactProfile.BasicProfile.ReferenceKey')
                      .done(function () {
                        
                      })
                      .fail(function () {
                       
                      });
                    </text>
                  }


                   

                    //previosuly
                   @* notifier.on('NewPostReceived', function (data1) {
                        var postKey = { postKey: data1 };
                        // alert('notification received key is: ' + postKey);
                        $.post("@Url.Action("GetExternalPost","Publishing")", postKey, function (data2) {

                            $(data2).insertAfter('section#new_post_section');

                        });

                       });*@

                    })
                    .fail(function () { alert('connection failed'); });

                  
            notifier.on('NewPostReceived', function (data) {
                var postKey = data.postKey;
                var processedHtml = data.processedHtml;
                $(processedHtml).insertAfter('section#new_post_section');
                var parameter = { postKey: postKey }
                $.get("@Url.Action("CreateMyInputForThisPost","Publishing")",parameter,function(result){
                  $(result).insertAfter('article#post_' + postKey);
                });

            });

            notifier.on('NewCommentReceived', function (data) {

                var postKey = data.postKey;
                var processedHtml = data.processedHtml;
              
                var theNewCommentArticleOfThisPost = $('#post_zone').find('#new_comment_post_' + postKey);

                $(processedHtml).insertBefore(theNewCommentArticleOfThisPost);
            });
                       
          });

    </script>
}